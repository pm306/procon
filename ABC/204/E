s→tへの最短距離を求める。
制約的にもダイクストラ法でほぼ確定だろう

特徴
・コストが変動制。
　分かりづらいが、時刻が早いほどコストがかかる(ラッシュアワーってそういう……)
・待機という選択肢がある
　最もコストが安くなる整数時間まで待機することができる

このことから、最適な待機時間がわかればダイクストラ法で答えが求まりそう。

----------------------------------
最適な待機時間について
f(t) = t + d / (t + 1)
とする。
グラフにプロットするとわかるが、
・t(その頂点への到着時間)が小さい場合は待った方が良い
・ある場所を超えるとコストは上がる一方なので、待たないほうが良い
ある場所（極小値）を実験してみると、√d付近であることがわかる

dは入力値によって変動するが、必ず
√d付近をいくつか探索してやれば良い

2012/07/10
盛大に勘違いした
辺ごとにコストが設定されてるのに、頂点と勘違いして実装しようとして詰まった

実装について
edge構造体自体にはdを持たせる必要はない
キューに詰める時にはコストは決まってるので不要
隣接リストの方に突っ込めば良い

※edgeのcostとグラフのcは別である
edgeのcostは、「確定している頂点から未確定の頂点に伸びている辺を辿った時の総コスト」
隣接リストのcは「総コストを計算するのに必要な情報(の一部)」。
dもcと同じく、総コストを計算するのに必要な情報の一部である。

この問題は、実装面では「edgeのコストを求める情報が複数ある場合」を問うてる
通常のダイクストラでは
edgeの情報(行き先,コスト)とgraph[i]の情報(行き先、コスト情報)が一致しているが、これはたまたま型が一致しているだけです　中身の意味合いは別
イメージ的には
グラフへの書き込みはメモ
edgeの中身は動的に変化する
名前が両方edgeだから混同する



